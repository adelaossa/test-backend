# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input CreateCustomerInput {
  address: String
  email: String
  name: String!
  phone: String
  taxId: String
}

input CreateInvoiceInput {
  customerId: Int!
  dueDate: String
  invoiceDate: String!
  invoiceNumber: String!
  items: [CreateInvoiceItemInput!]!
  notes: String
  status: InvoiceStatus! = DRAFT
  taxAmount: Float! = 0
}

input CreateInvoiceItemInput {
  description: String
  productId: Int!
  quantity: Int!
  unitPrice: Float!
}

input CreateProductInput {
  description: String
  name: String!
  price: Float!
  sku: String!
  stock: Int! = 0
  supplierId: Int
}

input CreateSupplierInput {
  address: String
  description: String
  email: String
  name: String!
  phone: String
}

type Customer {
  address: String
  createdAt: DateTime!
  email: String
  id: ID!
  invoices: [Invoice!]
  isActive: Boolean!
  name: String!
  phone: String
  taxId: String
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Invoice {
  createdAt: DateTime!
  customer: Customer!
  customerId: Float!
  dueDate: DateTime
  id: ID!
  invoiceDate: DateTime!
  invoiceNumber: String!
  isActive: Boolean!
  items: [InvoiceItem!]
  notes: String
  status: InvoiceStatus!
  subtotal: Float!
  taxAmount: Float!
  total: Float!
  updatedAt: DateTime!
}

type InvoiceItem {
  createdAt: DateTime!
  description: String
  id: ID!
  invoice: Invoice!
  invoiceId: Float!
  isActive: Boolean!
  product: Product!
  productId: Float!
  quantity: Int!
  totalPrice: Float!
  unitPrice: Float!
  updatedAt: DateTime!
}

enum InvoiceStatus {
  CANCELLED
  DRAFT
  PAID
  PENDING
}

type Mutation {
  createCustomer(input: CreateCustomerInput!): Customer!
  createInvoice(input: CreateInvoiceInput!): Invoice!
  createProduct(input: CreateProductInput!): Product!
  createSupplier(input: CreateSupplierInput!): Supplier!
  deleteCustomer(id: ID!): Boolean!
  deleteInvoice(id: ID!): Boolean!
  deleteProduct(id: ID!): Boolean!
  deleteSupplier(id: ID!): Boolean!
  restoreCustomer(id: ID!): Boolean!
  restoreProduct(id: ID!): Boolean!
  restoreSupplier(id: ID!): Boolean!
  softDeleteProduct(id: ID!): Boolean!
  softDeleteSupplier(id: ID!): Boolean!
  updateCustomer(id: ID!, input: UpdateCustomerInput!): Customer!
  updateInvoice(id: ID!, input: UpdateInvoiceInput!): Invoice!
  updateInvoiceStatus(id: ID!, status: InvoiceStatus!): Invoice!
  updateProduct(id: ID!, input: UpdateProductInput!): Product!
  updateSupplier(id: ID!, input: UpdateSupplierInput!): Supplier!
}

type Product {
  createdAt: DateTime!
  description: String
  id: ID!
  isActive: Boolean!
  name: String!
  price: Float!
  sku: String!
  stock: Float!
  supplier: Supplier
  supplierId: Float
  updatedAt: DateTime!
}

type Query {
  customer(id: ID!): Customer!
  customers: [Customer!]!
  invoice(id: ID!): Invoice!
  invoices(status: InvoiceStatus): [Invoice!]!
  invoicesByCustomer(customerId: ID!): [Invoice!]!
  product(id: ID!): Product!
  products: [Product!]!
  supplier(id: ID!): Supplier!
  suppliers: [Supplier!]!
}

type Supplier {
  address: String
  createdAt: DateTime!
  description: String
  email: String
  id: ID!
  isActive: Boolean!
  name: String!
  phone: String
  products: [Product!]
  updatedAt: DateTime!
}

input UpdateCustomerInput {
  address: String
  email: String
  name: String
  phone: String
  taxId: String
}

input UpdateInvoiceInput {
  customerId: Int
  dueDate: String
  invoiceDate: String
  invoiceNumber: String
  items: [CreateInvoiceItemInput!]
  notes: String
  status: InvoiceStatus = DRAFT
  taxAmount: Float = 0
}

input UpdateProductInput {
  description: String
  name: String
  price: Float
  sku: String
  stock: Int
  supplierId: Int
}

input UpdateSupplierInput {
  address: String
  description: String
  email: String
  name: String
  phone: String
}